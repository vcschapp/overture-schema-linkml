id: https://overturemaps.org/schema
name: schema

prefixes:
  linkml: https://w3id.org/linkml/
  overture: https://overturemaps.org/schema
  xsd: http://www.w3.org/2001/XMLSchema#

imports:
  - linkml:types
  - geometry

classes:
  # =================================
  # DATA CLASSES
  # =================================

  name_common:
    attributes:
      language:
        key: true
        range: language_tag
      value:
        range: string_non_empty_trimmed

  name_rule:
    attributes:
      variant:
        range: name_variant
        required: true
      value:
        range: string_non_empty_trimmed
        required: true
    mixins:
      - scope_geometric_range
      - scope_perspectives
      - scope_side

  names:
    attributes:
      primary:
        description: Name by which the feature is most commonly called
        required: true
        range: string_non_empty_trimmed
      common:
        description: Known translations of the commonly-used name
        # This modeling mostly works.
        #    - It generates roughly the correct JSON Schema.
        #    - The JSON Schema does validate values.
        #    - However, it does not validate minimum cardinality or keys.
        #    - Apart from this inline slot, the `name_common` class ALSO gets
        #      generated as a separate JSON Schema definition (NameCommon)
        #      which isn't necessary since it's not reachable in the tree, but
        #      that's a small issue.
        #    - The main pain point is lack of validation of minimum cardinality
        #      and keys, which we can live with and file bug fixes for.
        required: false
        multivalued: true
        inlined_as_list: false
        minimum_cardinality: 1
        range: name_common
      rules:
        description: >-
            Rules for names that cannot be specified in the simple common
            names property. These rules can cover other name variants,
            such as official, alternate, and short; and they can
            optionally include geometric scoping (linear referencing),
            side-of-facing scoping, and perspectives for complex cases.
        required: false
        multivalued: true
        minimum_cardinality: 1
        range: name_rule

  perspectives:
    attributes:
      mode:
        description: >-
          Whether the perspective holders accept or dispute the
          proposed fact.
        required: true
        range: perspective_mode
      countries:
        description: Countries holding the given mode of perspective.
        required: true
        multivalued: true
        inlined_as_list: true
        minimum_cardinality: 1
        # KNOWN FEATURE GAP: JSON Schema allows us to specify that the
        #                    array may only contain unique items, but
        #                    LinkML does not have an analogous feature.
        #                    Ideally we'd be able to specify:
        #                    uniqueness, sortedness, and set-ness (is
        #                    it an array with set semantics?) which
        #                    implies uniqueness but perhaps would come
        #                    with other representation-specific goodies.
        range: country_code

  source:
    description: >-
      Source record identifying source data from which the feature
      property, or the whole feature, is derived.
    attributes:
      property:
        description: >-
          The property of the containing feature for which this source
          record identifies the source. Contains a JSON Pointer value
          indicating the feature property this record applies to, where
          the empty string means the record applies to the entire
          feature.
        required: true
        range: jsonpointer
      dataset:
        description: >-
          Source dataset from which the data for referenced property
          or entire feature is derived. Contains a value from the
          approved sources list maintained by the Overture Map Data
          Working Group. Consult this list for richer metadata about
          the dataset, including license and source organization.
        required: true
        range: string_non_empty_trimmed
      record_id:
        description: >-
          Identifies the record within the source dataset where the
          source data can be found. The ID format and meaning of this
          ID value is specific to the source dataset.
        required: false
        range: string_non_empty_trimmed
      update_time:
        description: >-
          Last update time of the soure record if it is known.
        required: false
        range: timestamp
      confidence:
        description: >-
          Confidence value from source dataset, particularl relevant
          for AI and ML-derived data.
        required: false
        range: confidence
    mixins:
      - scope_geometric_range

  # =================================
  # SCOPING MIXINS
  # =================================

  scope_geometric_range:
    description: >-
      Establishes a scope that applies only between two positions along
      a linear path. Enables range-based linear referencing.
    mixin: true
    attributes:
      between:
        description: >-
          Represents the range of positions along a linaer path between
          which something occurs, e.g. a road or rail segment has a
          tunnel between two known positions.
        required: false
        multivalued: true
        minimum_cardinality: 2
        maximum_cardinality: 2
        range: linearly_referenced_position
        # KNOWN BUG: LinkML's JSON Schema generator gets confused by
        #            indirection. When range is set to "percentage",
        #            which is a type I have defined directly, it
        #            correctly limits the array `items` to the JSON
        #            type `number`. But when I set it to
        #            `linearly_referenced_position`, which is a type that
        #            is BASED ON the type `percentage`, it incorrectly
        #            generates the JSON type `string` for the `items.
  scope_perspectives:
    description: >-
      Establishes a scope that applies only when a specific political
      perspective is adopted.
    mixin: true
    attributes:
      perspectives:
        description: >-
          Represents the political perspectives from which a proposed
          fact is accepted or disputed.
        required: false
        range: perspectives

  scope_side:
    description: >-
      Establishes a scope that applies only to the left or right-hand
      side, relative to an orientation, e.g. a name that applies only to
      the left side of a road segment when facing in the direction of
      the segment orientation.
    mixin: true
    attributes:
      side:
        description: >-
          Represents the side on which something occurs relative to a
          facing or heading direction, e.g. the side of a road relative
          to the road orientation, or relative to the direction of
          travel of a person or vehicle.
        required: false
        range: side

  # =================================
  # FEATURE TYPES
  # =================================

  feature:
    abstract: true
    slots:
      - id
      - type
      - geometry
      - version
      - sources
      - theme

  building:
    is_a: feature
    slots:
      - names
    slot_usage:
      theme:
        range: theme_buildings

  building_part:
    is_a: feature
    slots:
      - building_id
      - names
    slot_usage:
      building_id:
        required: true
      theme:
        range: theme_buildings

slots:
  building_id:
    slot_uri: overture:slot.building_id
    range: building
    inlined: false
    description: Unique ID of an associated building feature
  id:
    identifier: true
    slot_uri: overture:slot.id
    required: true
    range: uuid
    description: Unique ID of the feature
  geometry:
    slot_uri: overture:slot.geometry
    required: true
    range: geometry
    description: OGC simple geometry of the feature
  names:
    slot_uri: overture:slot.names
    required: false
    range: names
    description: Names by which a feature is called
  names_primary:
    slot_uri: overture:slot.names.primary
    alias: primary
    required: true
    range: string_non_empty_trimmed
    description: Most commonly-used name of the feature
  sources:
    slot_uri: overture:slot.sources
    required: false
    range: source
    multivalued: true
    inlined_as_list: false
    minimum_cardinality: 1
    description: >-
      List of source datasets from which the feature data are derived.
      All features features must have a root level source (whose
      `property` value is blank) which is the default source for all
      feature properties which do not have their own explicit source
      record.
  theme:
    slot_uri: overture:slot.theme
    required: true
    range: theme
    description: Overture theme this feature type belongs to
  type:
    slot_uri: overture:slot.type
    required: true
    designates_type: true
    range: string
    description: Feature type, e.g. building or place
  version:
    slot_uri: overture:slot.version
    required: true
    range: integer_positive
    description: >-
        Version number of the feature, incremented in each Overture
        release where the geometry or attributes of the feature
        changed.

types:
  confidence:
    uri: overture:type.confidence
    description: >-
      Confidence level in the validity of data expressed as a percentage
      value where 0% represents total disbelief and 100% represents
      total confidence.
    base: percentage
  country_code:
    uri: overture:type.country
    description: ISO 3166-1 alpha-2 country code
    base: str
    pattern: "^[A-Z]{2}$"
  integer_positive:
    uri: xsd:positiveInteger
    description: Integer greater than or equal to 1
    base: int
    minimum_value: 1
  language_tag:
    uri: overture:type.language_tag
    description: Lexically valid BCP-47 language tag such as 'en', 'en-US', 'zh-Hans'
    base: str
    pattern: "^(?:(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}?)|(?:[A-Za-z]{4,8}))(?:-[A-Za-z]{4})?(?:-[A-Za-z]{2}|[0-9]{3})?(?:-(?:[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(?:-[A-WY-Za-wy-z0-9](?:-[A-Za-z0-9]{2,8})+)*$"
  linearly_referenced_position:
    uri: overture:type.linearly_referenced_position
    description: >-
      A linearly-referenced position between 0% and 100% of the distance
      along a linear path such as a road or river center-line.
    base: percentage
  percentage:
    uri: overture:type.percentage
    description: A clamped percentage between 0% and 100%, inclusive
    base: decimal
    minimum_value: 0.0
    maximum_value: 1.0
  string_non_empty_trimmed:
    uri: overture:type.string_non_empty_trimmed
    description: Non-empty string without leading or trailing whitespace
    base: string_trimmed
    pattern: ^(\S.*)?\S$
  timestamp:
    uri: overture:type.timestamp
    description: An ISO-8601 formatted timestamp string
    base: datetime
  uuid:
    uri: overture:type.uuid
    description: Universally Unique Identifier (UUID)
    base: str
    pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"

enums:
  name_variant:
    description: Broad category of feature name, e.g. the official name
    permissible_values:
      common:
      official:
      alternate:
      short:
  perspective_mode:
    description: >-
      Whether perspective holder accepts or disputes the proposed fact.
    permissible_values:
      accepted_by:
      disputed_by:
  side:
    description: Left or right
    permissible_values:
      left:
      right:
  theme:
    description: Overture theme, e.g. buildings or transportation
    permissible_values:
      addresses:
      buildings:
  theme_buildings:
    description: Narrows the theme enumeration to just the buildings theme
    permissible_values:
      buildings:
